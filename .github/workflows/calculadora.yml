# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Java CI with Maven

on:
  push:
    branches: [ "main" ]

jobs:
  build:

    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 23
      uses: actions/setup-java@v4
      with:
        java-version: '23'
        distribution: 'temurin'
        cache: maven
    - name: Build with Maven
      run: mvn -B package --file pom.xml
 # deploy:
#    runs-on: windows-latest
  #  needs: build

#    steps:
#      - name: Copy .jar to remote server
  #      env:
 #         SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }} # Clave privada almacenada como secreto
  #        run: |
  #          mkdir -p ~/.ssh
   #         echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
  #          chmod 600 ~/.ssh/id_rsa
    #        scp -o StrictHostKeyChecking=no target/*.jar <usuario>@<ip-o-dominio-servidor>:/ruta/remota/
  
      # Paso 5: Ejecutar el archivo .jar en el servidor remoto
  #    - name: Run .jar on remote server
  #      env:
  #          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
   #     run: |
    #        ssh -o StrictHostKeyChecking=no <usuario>@<ip-o-dominio-servidor> << EOF
  #            cd /ruta/remota/
    #          java -jar nombre-del-archivo.jar
     #       EOF
